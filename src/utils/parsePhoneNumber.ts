import { parsePhoneNumberFromString, CountryCode } from 'libphonenumber-js';

const countryCodeMapping = {
  1: 'AF',
  2: 'AL',
  3: 'DZ',
  4: 'AS',
  5: 'AD',
  6: 'AO',
  7: 'AI',
  8: 'AQ',
  9: 'AG',
  10: 'AR',
  11: 'AM',
  12: 'AW',
  13: 'AU',
  14: 'AT',
  15: 'AZ',
  16: 'BS',
  17: 'BH',
  18: 'BD',
  19: 'BB',
  20: 'BY',
  21: 'BE',
  22: 'BZ',
  23: 'BJ',
  24: 'BM',
  25: 'BT',
  26: 'BO',
  27: 'BA',
  28: 'BW',
  29: 'BV',
  30: 'BR',
  31: 'IO',
  32: 'BN',
  33: 'BG',
  34: 'BF',
  35: 'BI',
  36: 'KH',
  37: 'CM',
  38: 'CA',
  39: 'CV',
  40: 'KY',
  41: 'CF',
  42: 'TD',
  43: 'CL',
  44: 'CN',
  45: 'CX',
  46: 'CC',
  47: 'CO',
  48: 'KM',
  49: 'CG',
  50: 'CK',
  51: 'CR',
  52: 'CI',
  53: 'HR',
  54: 'CU',
  55: 'CY',
  56: 'CZ',
  57: 'DK',
  58: 'DJ',
  59: 'DM',
  60: 'DO',
  61: 'TP',
  62: 'EC',
  63: 'EG',
  64: 'SV',
  65: 'GQ',
  66: 'ER',
  67: 'EE',
  68: 'ET',
  69: 'FK',
  70: 'FO',
  71: 'FJ',
  72: 'FI',
  73: 'FR',
  74: 'FX',
  75: 'GF',
  76: 'PF',
  77: 'TF',
  78: 'GA',
  79: 'GM',
  80: 'GE',
  81: 'DE',
  82: 'GH',
  83: 'GI',
  84: 'GR',
  85: 'GL',
  86: 'GD',
  87: 'GP',
  88: 'GU',
  89: 'GT',
  90: 'GN',
  91: 'GW',
  92: 'GY',
  93: 'HT',
  94: 'HM',
  95: 'HN',
  96: 'HK',
  97: 'HU',
  98: 'IS',
  99: 'IN',
  100: 'ID',
  101: 'IR',
  102: 'IQ',
  103: 'IE',
  104: 'IL',
  105: 'IT',
  106: 'JM',
  107: 'JP',
  108: 'JO',
  109: 'KZ',
  110: 'KE',
  111: 'KI',
  112: 'KP',
  113: 'KR',
  114: 'KW',
  115: 'KG',
  116: 'LA',
  117: 'LV',
  118: 'LB',
  119: 'LS',
  120: 'LR',
  121: 'LY',
  122: 'LI',
  123: 'LT',
  124: 'LU',
  125: 'MO',
  126: 'MK',
  127: 'MG',
  128: 'MW',
  129: 'MY',
  130: 'MV',
  131: 'ML',
  132: 'MT',
  133: 'MH',
  134: 'MQ',
  135: 'MR',
  136: 'MU',
  137: 'YT',
  138: 'MX',
  139: 'FM',
  140: 'MD',
  141: 'MC',
  142: 'MN',
  143: 'MS',
  144: 'MA',
  145: 'MZ',
  146: 'MM',
  147: 'NA',
  148: 'NR',
  149: 'NP',
  150: 'NL',
  151: 'AN',
  152: 'NC',
  153: 'NZ',
  154: 'NI',
  155: 'NE',
  156: 'NG',
  157: 'NU',
  158: 'NF',
  159: 'MP',
  160: 'NO',
  161: 'OM',
  162: 'PK',
  163: 'PW',
  164: 'PA',
  165: 'PG',
  166: 'PY',
  167: 'PE',
  168: 'PH',
  169: 'PN',
  170: 'PL',
  171: 'PT',
  172: 'PR',
  173: 'QA',
  174: 'RE',
  175: 'RO',
  176: 'RU',
  177: 'RW',
  178: 'KN',
  179: 'LC',
  180: 'VC',
  181: 'WS',
  182: 'SM',
  183: 'ST',
  184: 'SA',
  185: 'SN',
  186: 'SC',
  187: 'SL',
  188: 'SG',
  189: 'SK',
  190: 'SI',
  191: 'SB',
  192: 'SO',
  193: 'ZA',
  194: 'ES',
  195: 'LK',
  196: 'SH',
  197: 'PM',
  198: 'SD',
  199: 'SR',
  200: 'SJ',
  201: 'SZ',
  202: 'SE',
  203: 'CH',
  204: 'SY',
  205: 'TW',
  206: 'TJ',
  207: 'TZ',
  208: 'TH',
  209: 'TG',
  210: 'TK',
  211: 'TO',
  212: 'TT',
  213: 'TN',
  214: 'TR',
  215: 'TM',
  216: 'TC',
  217: 'TV',
  218: 'UG',
  219: 'UA',
  220: 'AE',
  221: 'GB',
  222: 'US',
  223: 'UM',
  224: 'UY',
  225: 'UZ',
  226: 'VU',
  227: 'VA',
  228: 'VE',
  229: 'VN',
  230: 'VG',
  231: 'VI',
  232: 'WF',
  233: 'EH',
  234: 'YE',
  235: 'RS',
  236: 'ZR',
  237: 'ZM',
  238: 'ZW',
  239: 'EU',
  241: 'ME',
};

const parsePhoneNumber = (phone: string, countryId: string | null = null, countryRegionCode = 'SE') => {
  let countryCode = countryRegionCode;

  if (countryId) {
    countryCode = countryCodeMapping[countryId as keyof typeof countryCodeMapping] as CountryCode;
  }

  let phones = phone.split(' / ');
  if (phones.length > 1) {
    phones = phones.map((phoneNumber) => {
      const parsedPhoneNumber = parsePhoneNumberFromString(phoneNumber, countryCode as CountryCode);
      return parsedPhoneNumber ? parsedPhoneNumber.formatInternational() : phoneNumber;
    });
    return phones.join(' / ');
  }
  const phoneNumber = parsePhoneNumberFromString(phone, countryCode as CountryCode);
  return phoneNumber ? phoneNumber.formatInternational() : phone;
};

export default parsePhoneNumber;
