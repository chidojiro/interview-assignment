const changeSVGPath = (use: Element) => {
  const SVG_XLINK = 'http://www.w3.org/1999/xlink';

  const svgPath = !window.location.href.includes('localhost') ? '/build/assets' : '/src/docs-lib/assets';

  const newPath = use?.getAttribute('xlink:href')?.replace('/src/assets/img/icons.svg', `${svgPath}/autogenerated-icons.svg`);

  if (newPath) {
    use.setAttributeNS(SVG_XLINK, 'xlink:href', newPath);
  }
};

export default function load() {
  const observerConfig = {
    childList: true,
    subtree: true,
  };

  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      for (let i = 0; i < mutation.addedNodes.length; i += 1) {
        if (!(mutation.addedNodes[i] instanceof HTMLElement)) {
          // Needs refactoring.
          // eslint-disable-next-line no-continue
          continue;
        }

        const use = (mutation.addedNodes[i] as HTMLElement).querySelectorAll("[data-testid='mountNode'] .icon > svg use");

        if (use['0'] && use['0'].getAttribute('xlink:href')?.includes('themes')) {
          use.forEach((k) => changeSVGPath(k));
        }
      }
    });
  });

  const mainContent = document.querySelector('main.rsg--content-3');

  if (mainContent !== null) {
    observer.observe(mainContent, observerConfig);
  } else {
    // Important to print the message.
    // eslint-disable-next-line no-console
    console.error('Could not find main.rsg--content-3');
  }
}
